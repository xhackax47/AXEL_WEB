# Generated by Django 3.0.2 on 2020-01-21 10:50

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    replaces = [('WebAXEL', '0001_initial'), ('WebAXEL', '0002_auto_20191228_1608'), ('WebAXEL', '0003_choice_question'), ('WebAXEL', '0004_auto_20191228_1611'), ('WebAXEL', '0005_auto_20191229_0112'), ('WebAXEL', '0006_article_image'), ('WebAXEL', '0007_auto_20191229_1455'), ('WebAXEL', '0008_document_srcdoc'), ('WebAXEL', '0009_auto_20191229_1505'), ('WebAXEL', '0010_document_description'), ('WebAXEL', '0011_auto_20191229_1513'), ('WebAXEL', '0012_document_document'), ('WebAXEL', '0013_auto_20191230_2001'), ('WebAXEL', '0014_remove_document_srcdoc'), ('WebAXEL', '0015_auto_20191231_0249'), ('WebAXEL', '0016_auto_20200102_1107'), ('WebAXEL', '0017_auto_20200103_1020'), ('WebAXEL', '0018_axeladmin_axeluser'), ('WebAXEL', '0019_delete_axeladmin'), ('WebAXEL', '0020_auto_20200103_2344'), ('WebAXEL', '0021_auto_20200103_2346'), ('WebAXEL', '0022_auto_20200103_2349'), ('WebAXEL', '0023_auto_20200104_0040'), ('WebAXEL', '0024_auto_20200104_0058'), ('WebAXEL', '0025_auto_20200104_0100'), ('WebAXEL', '0026_auto_20200104_1032'), ('WebAXEL', '0027_auto_20200104_1033'), ('WebAXEL', '0028_auto_20200104_1036'), ('WebAXEL', '0029_auto_20200104_1059'), ('WebAXEL', '0030_auto_20200104_1110'), ('WebAXEL', '0031_auto_20200104_1118'), ('WebAXEL', '0032_auto_20200104_1124'), ('WebAXEL', '0033_axeluser_username'), ('WebAXEL', '0034_customgroup'), ('WebAXEL', '0035_auto_20200104_2109'), ('WebAXEL', '0036_auto_20200106_1241'), ('WebAXEL', '0037_auto_20200106_1243'), ('WebAXEL', '0038_auto_20200106_1247'), ('WebAXEL', '0039_dataset_source'), ('WebAXEL', '0040_auto_20200107_1247'), ('WebAXEL', '0041_auto_20200107_1301'), ('WebAXEL', '0042_auto_20200107_1309'), ('WebAXEL', '0043_auto_20200107_1311'), ('WebAXEL', '0044_auto_20200107_1313'), ('WebAXEL', '0045_auto_20200107_1314'), ('WebAXEL', '0046_auto_20200107_1358'), ('WebAXEL', '0047_auto_20200107_1358'), ('WebAXEL', '0048_auto_20200108_1011'), ('WebAXEL', '0049_robot_doc'), ('WebAXEL', '0050_auto_20200108_1117'), ('WebAXEL', '0051_robot_image'), ('WebAXEL', '0052_auto_20200109_1300'), ('WebAXEL', '0053_auto_20200120_1535')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataSetCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('categorie', models.CharField(max_length=255, verbose_name='Catégorie du jeu de données')),
            ],
        ),
        migrations.CreateModel(
            name='DocumentCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('categorie', models.CharField(max_length=255, verbose_name='Catégorie du Document')),
            ],
        ),
        migrations.CreateModel(
            name='DataSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255, verbose_name='Nom')),
                ('date_ajout', models.DateTimeField(auto_now_add=True, verbose_name="Date d'ajout du jeu de données")),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description du jeu de données')),
                ('dataset', models.FileField(null=True, upload_to='static/datasets/', verbose_name='Fichier jeu de données')),
                ('source', models.URLField(blank=True, max_length=1000, verbose_name='Source')),
                ('categories_dataset', models.ManyToManyField(blank=True, default=None, to='WebAXEL.DataSetCategory', verbose_name='Catégories du jeu de données')),
                ('nb_vues', models.IntegerField(default=0, verbose_name='Nombre de vues du jeu de données')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=255, verbose_name='Titre')),
                ('date_ajout', models.DateTimeField(auto_now_add=True, verbose_name="Date d'ajout du document")),
                ('auteur', models.CharField(blank=True, max_length=255, null=True, verbose_name='Auteur du document')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description du document')),
                ('document', models.FileField(null=True, upload_to='static/docs/', verbose_name='Fichier document')),
                ('nb_vues', models.IntegerField(default=0, verbose_name='Nombre de vues du document')),
                ('categories_document', models.ManyToManyField(blank=True, default=None, to='WebAXEL.DocumentCategory', verbose_name='Catégories du Document')),
            ],
        ),
        migrations.CreateModel(
            name='AxelUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_img', models.ImageField(upload_to='static/img/profilesImages/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.AlterModelManagers(
            name='axeluser',
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='user',
        ),
        migrations.AddField(
            model_name='axeluser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='email',
            field=models.EmailField(blank=True, max_length=254, verbose_name='email address'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='first_name',
            field=models.CharField(blank=True, max_length=30, verbose_name='first name'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='password',
            field=models.CharField(max_length=128, verbose_name='password'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='username',
            field=models.CharField(max_length=100, unique=True),
        ),
        migrations.AlterModelOptions(
            name='axeluser',
            options={},
        ),
        migrations.AlterModelManagers(
            name='axeluser',
            managers=[
            ],
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='date_joined',
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='email',
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='first_name',
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='groups',
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='is_active',
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='is_staff',
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='is_superuser',
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='last_name',
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='user_permissions',
        ),
        migrations.AlterModelOptions(
            name='axeluser',
            options={'verbose_name': 'user', 'verbose_name_plural': 'users'},
        ),
        migrations.AlterModelManagers(
            name='axeluser',
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='username',
        ),
        migrations.AddField(
            model_name='axeluser',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='first_name',
            field=models.CharField(blank=True, max_length=30, verbose_name='first name'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='fonction',
            field=models.CharField(choices=[('Visiteur', 'Guest'), ('Utilisateur', 'User'), ('Développeur', 'Dev'), ('Administrateur Django', 'Djangadmin'), ('Administrateur A.X.E.L.', 'Axeladmin')], default='Visiteur', max_length=100),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='email',
            field=models.EmailField(max_length=254, null=True, unique=True, verbose_name='email address'),
        ),
        migrations.AlterModelOptions(
            name='axeluser',
            options={},
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='date_joined',
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='first_name',
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='groups',
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='is_active',
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='is_staff',
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='is_superuser',
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='last_name',
        ),
        migrations.RemoveField(
            model_name='axeluser',
            name='user_permissions',
        ),
        migrations.AlterModelOptions(
            name='axeluser',
            options={'verbose_name': 'user', 'verbose_name_plural': 'users'},
        ),
        migrations.AlterModelManagers(
            name='axeluser',
            managers=[
            ],
        ),
        migrations.AddField(
            model_name='axeluser',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='first_name',
            field=models.CharField(blank=True, max_length=30, verbose_name='first name'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterField(
            model_name='axeluser',
            name='email',
            field=models.EmailField(max_length=254, unique=True, verbose_name='email address'),
        ),
        migrations.AlterField(
            model_name='axeluser',
            name='fonction',
            field=models.CharField(choices=[('Visiteur', 'Guest'), ('Utilisateur', 'User'), ('Développeur', 'Dev'), ('Administrateur Django', 'Djangadmin'), ('Administrateur A.X.E.L.', 'Axeladmin'), ('Super Administrateur', 'Superadmin')], default='Visiteur', max_length=100),
        ),
        migrations.AddField(
            model_name='axeluser',
            name='username',
            field=models.CharField(max_length=100, null=True, unique=True, verbose_name="Nom d'utilisateur"),
        ),
        migrations.CreateModel(
            name='AxelGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.Group')),
                ('description', models.CharField(max_length=1024)),
            ],
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.AlterField(
            model_name='axeluser',
            name='profile_img',
            field=models.ImageField(null=True, upload_to='static/img/profilesImages/'),
        ),
        migrations.AlterField(
            model_name='axeluser',
            name='profile_img',
            field=models.ImageField(blank=True, upload_to='static/img/profilesImages/'),
        ),
        migrations.AlterField(
            model_name='axeluser',
            name='fonction',
            field=models.CharField(choices=[('Visiteur', 'Guest'), ('Utilisateur', 'User'), ('Développeur', 'Dev'), ('Administrateur Django', 'Djangadmin'), ('Administrateur A.X.E.L.', 'Axeladmin'), ('Super Administrateur', 'Superadmin')], default='Visiteur', max_length=100, verbose_name='Fonction'),
        ),
        migrations.AlterField(
            model_name='axeluser',
            name='profile_img',
            field=models.ImageField(blank=True, upload_to='static/img/profilesImages/', verbose_name='Image Profil'),
        ),
        migrations.CreateModel(
            name='RobotCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('categorie', models.CharField(max_length=255, verbose_name='Catégorie du robot')),
            ],
        ),
        migrations.CreateModel(
            name='Robot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255, verbose_name='Nom')),
                ('model', models.CharField(max_length=255, verbose_name='Modèle')),
                ('utilisation', models.CharField(max_length=1000, verbose_name='Utilisation')),
                ('date_ajout', models.DateTimeField(auto_now_add=True, verbose_name="Date d'ajout du robot")),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description du robot')),
                ('categories_robot', models.ManyToManyField(blank=True, default=None, to='WebAXEL.RobotCategory', verbose_name='Catégories du robot')),
                ('doc', models.FileField(null=True, upload_to='static/robots/', verbose_name='Documentation Robot')),
                ('image', models.ImageField(blank=True, upload_to='static/img/robots', verbose_name='Image Robot')),
                ('nb_vues', models.IntegerField(default=0, verbose_name='Nombre de vues du robot')),
            ],
        ),
    ]
